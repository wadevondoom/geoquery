---
- name: Deploy Flask app on Debian-based Droplet
  hosts: droplet
  become: yes
  gather_facts: yes
  vars:
    app_user: appuser

  tasks:
    - name: Create application user
      ansible.builtin.user:
        name: "appuser"
        shell: /bin/bash
        state: present

    - name: Set environment variables for appuser
      ansible.builtin.lineinfile:
        path: /home/appuser/.bashrc
        line: "export {{ item.name }}={{ item.value }}"
        create: yes
      loop:
        - name: DBCONN
          value: "mongodb+srv://sb_user:M3VheMVbEzMEqDln@cluster0.dtfe8lw.mongodb.net/?retryWrites=true&w=majority"
        - name: IPInfoToken
          value: 628aaf349fa762
        - name: OPENAI_SECRET
          value: "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"
      become_user: appuser
 

    - name: Update and upgrade packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: Install necessary packages
      apt:
        pkg:
          - python3-pip
          - python3-dev
          - nginx
        state: present

    - name: Install git
      apt:
        pkg: git
        state: present

    - name: Install python3-virtualenv
      apt:
        pkg:
          - python3-virtualenv
        state: present

    - name: Create virtual environment for appuser
      become_user: appuser
      ansible.builtin.command: python3 -m venv /home/appuser/venv
      args:
        creates: /home/appuser/venv

    - name: Install Gunicorn and Flask in virtual environment
      become_user: appuser
      pip:
        name:
          - gunicorn
          - Flask
        state: present
        virtualenv: /home/appuser/venv

    - name: Grant CAP_NET_RAW capability to the system-wide Python interpreter
      ansible.builtin.command: setcap cap_net_raw+ep /usr/bin/python3.10


    - name: Clone Flask app repository
      git:
        repo: https://github.com/wadevondoom/geoquery
        dest: /home/appuser/geoquery
      become_user: appuser


    - name: Install Flask app requirements
      pip:
        requirements: /home/appuser/geoquery/requirements.txt
        state: present
        virtualenv: /home/appuser/venv


    - name: Create directory for gunicorn.sock file
      ansible.builtin.file:
        path: /home/appuser/gunicorn_socks
        state: directory
        owner: appuser
        group: www-data
        mode: '0750'

    - name: Change ownership of the geoquery directory
      ansible.builtin.file:
        path: /home/appuser/geoquery
        owner: appuser
        group: appuser
        recurse: yes

    - name: Create Gunicorn systemd service file
      ansible.builtin.copy:
        content: |
          [Unit]
          Description=Gunicorn instance to serve Flask app
          After=network.target

          [Service]
          User=appuser
          Group=www-data
          WorkingDirectory=/home/appuser/geoquery/
          Environment="PATH=/home/appuser/.local/bin"
          Environment="DBCONN=mongodb+srv://sb_user:M3VheMVbEzMEqDln@cluster0.dtfe8lw.mongodb.net/?retryWrites=true&w=majority"
          Environment="IPInfoToken=628aaf349fa762"
          Environment="OPENAI_SECRET=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"
          ExecStart=/home/appuser/venv/bin/gunicorn --workers 3 --bind unix:/home/appuser/gunicorn_socks/geoquery.sock app:app

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/gunicorn.service

    - name: Start and enable Gunicorn service
      ansible.builtin.systemd:
        name: gunicorn
        state: started
        enabled: yes

    - name: Configure Nginx to proxy requests to Gunicorn
      ansible.builtin.copy:
        content: |
          server {
              listen 80;
              server_name 165.232.66.223;

              location / {
                  include proxy_params;
                  proxy_pass http://unix:/home/appuser/gunicorn_socks/gunicorn.sock;
              }
          }
        dest: /etc/nginx/sites-available/geoquery

    - name: Create a symbolic link to the Nginx configuration file
      ansible.builtin.file:
        src: /etc/nginx/sites-available/geoquery
        dest: /etc/nginx/sites-enabled/geoquery
        state: link

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test_result
      changed_when: False

    - name: Restart Nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted
      when: nginx_test_result.stdout.find('successful') != -1

    - name: Install ufw
      apt:
        pkg: ufw
        state: present

    - name: Allow HTTP traffic
      ansible.builtin.ufw:
        rule: allow
        name: Nginx Full
